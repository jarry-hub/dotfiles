"Plugin{
"cscope {
" 用Cscope自己的话说 - "你可以把它当做是超过频的ctags"
if has("cscope")
    "使用|:cstag|而不是默认的:tag行为
    set cst
    "设定可以使用 quickfix 窗口来查看 cscope 结果
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    "使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳转
    set cscopetag
    "如果你想反向搜索顺序设置为1
    set csto=1

    "在当前目录中添加任何数据库
    function! LoadCscope()
        let db = findfile("cscope.out", ".;")
        if (!empty(db))
            let path = strpart(db, 0, match(db, "/cscope.out$"))
            set nocscopeverbose " suppress 'duplicate connection' error
            exe "cs add " . db . " " . path
            set cscopeverbose
        endif
    endfunction
    au BufEnter /* call LoadCscope()

    set cscopeverbose
    "快捷键设置
    "查找本 C 符号(可以跳过注释)
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    "查找本定义
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    "查找调用本函数的函数
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    "查找本字符串
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    "查找本 egrep 模式
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    "查找本文件
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    "查找包含本文件的文件
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    "查找本函数调用的函数
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif
" cscope end}

" NerdTree {
if isdirectory(expand("~/.vim/bundle/nerdtree"))
    let NERDTreeQuitOnOpen=0
endif
" NerdTree end}

" SingleCompile {
if isdirectory(expand("~/.vim/bundle/SingleCompile"))
    nmap <F9> :SCCompile<cr>
    imap <F9> <ESC>:SCCompile<cr>
    vmap <F9> <ESC>:SCCompile<cr>

    nmap <F10> :SCCompileRun<cr>
    imap <F10> <ESC>:SCCompileRun<cr>
    vmap <F10> <ESC>:SCCompileRun<cr>
endif
" SingleCompile end}
" }

" YouCompleteMe {
if count(g:spf13_bundle_groups, 'youcompleteme')
    "关闭加载.ycm_extra_conf.py提示
    let g:ycm_confirm_extra_conf=0
    " 开启 YCM 基于标签引擎
    let g:ycm_collect_identifiers_from_tags_files=1
    "从第2个键入字符就开始罗列匹配项
    let g:ycm_min_num_of_chars_for_completion=2"
    "禁止缓存匹配项,每次都重新生成匹配项
    " let g:ycm_cache_omnifunc=0
    " 语法关键字补全
    let g:ycm_seed_identifiers_with_syntax=1
    "在注释输入中也能补全
    let g:ycm_complete_in_comments = 1
    "在字符串输入中也能补全
    let g:ycm_complete_in_strings = 1
    "注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_comments_and_strings = 0
endif
" YouCompleteMe end}
" Plugin end}

"General{
" 常规模式下用空格键来开关光标行所在折叠（注：zR 展开所有折叠，zM 关闭所有折叠）
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

"Input method delay
set ttimeoutlen=100
" General end}

" Formatting {
"自动换行
set wrap
" Formatting end}
